{"./":{"url":"./","title":"简介","keywords":"","body":"Python-for-Everybody 初级 关于此课程 This Specialization builds on the success of the Python for Everybody course and will introduce fundamental programming concepts including data structures, networked application program interfaces, and databases, using the Python programming language. In the Capstone Project, you’ll use the technologies learned throughout the Specialization to design and create your own applications for data retrieval, processing, and visualization. 1. 零基础程序设计（Python 入门） 2. Python 数据结构 3. 使用 Python 访问网络数据 4. Python 数据库开发 5. 毕业项目：使用 Python 获取并处理数据，并用可视化方式展现数据 "},"02-Structure/":{"url":"02-Structure/","title":"Python 数据结构","keywords":"","body":"Python Data Structures 初级 关于此课程 This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook “Python for Everybody”. This course covers Python 3. Chapter 6: Strings Chapter 7: Files Chapter 8: Lists Chapter 9: Dictionaries Chapter 10: Tuples "},"02-Structure/Chapter-6-Strings.html":{"url":"02-Structure/Chapter-6-Strings.html","title":"第六章: 字符串","keywords":"","body":"第六章: 字符串 第六章: 字符串 创建 用法 字符串连接 字符串转换 字符串选择 选择 切片 字符串长度 逻辑判断 比较 字符查找 抹掉空格 字符串字典 创建 string可由单双引号创建，'' 或 \"\"。 str1 = 'Hello' str2 = \"World\" 用法 字符串连接 使用 + 来\b连接2个字符串。 >>> str1 = 'Hello' >>> str2 = \"World\" >>> str1+str2 'HelloWorld' 字符串转换 通过 int() 将 string 转换为 int 类。 >>> str3 = '123' >>> type(str3) >>> num = int(str3) >>> type(num) int() 常于 input() 连用。 >>> num = int(input('number = ')) number = 123 >>> type(num) \bExample: $output = input + 1$ >>> x = input(\"number = \") + 1 number = 123 Traceback (most recent call last): File \"\", line 1, in TypeError: can only concatenate str (not \"int\") to str >>> x = input(\"number = \") number = 123 >>> x = int(x) + 1 >>> x 124 字符串选择 选择 通过索引 index 和方括号 [ ] 来查看字符串内部数据。 >>> fruit = 'banana' >>> index = 1 >>> fruit[index] 'a' index 必须为整数 index 必须从 0 开始 index 可以是运算操作>>> fruit = 'banana' >>> fruit[2-1] 'a' 如果索引 index 超出字符串长度，将会导致错误。 >>> fruit = 'banana' >>> fruit[10] Traceback (most recent call last): File \"\", line 1, in IndexError: string index out of range 切片 >>> s = 'Monty Python' >>> print(s[0:4]) Mont 切片位置到第二个数之前，不包括第二个数。>>> print(s[6:7]) P 如果索引超出范围，切片会在字符串末尾结束。>>> print(s[6:20]) Python 左、右缺省将被分别视作从头开始和到末尾结束。>>> s = 'Monty Python' >>> print(s[:2]) Mo >>> print(s[8:]) thon >>> print(s[:]) Monty Python 字符串长度 内建函数 len() 可用来计算字符串长度。 >>> fruit = 'banana' >>> print(len(fruit)) 6 逻辑判断 >>> fruit = 'banana' >>> 'n' in fruit True >>> 'm' in fruit False >>> 'nan' in fruit True >>> if 'a' in fruit : ... print('Found it!') ... Found it! 比较 if word == 'banana': print('All right, bananas.') if word 'banana': print('Your word,' + word + ', comes after banana.') else: print('All right, bananas.') 字符查找 我们通过 find() \b来寻找字符串中的子字符串。 find() 寻找子字符串第一次出现的位置。>>> fruit = 'banana' >>> pos = fruit.find('na') >>> print(pos) 2 如果子字符串未被找到，则 find() 返回 -1。>>> aa = fruit.find('z') >>> print(aa) -1 抹掉空格 strip() 同时抹掉开头和\b结尾的空格（子字符串）。>>> greet = ' Hello Bob ' >>> greet.strip() 'Hello Bob' lstrip() 和 rstrip() 分别抹掉\b开头和结尾的空格（子字符串）。>>> greet = ' Hello Bob ' >>> greet.lstrip() 'Hello Bob ' >>> greet.rstrip() ' Hello Bob' 字符串字典 字符串内建函数库 Library。 >>> stuff = 'Hello world' >>> type(stuff) >>> dir(stuff) ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] "},"02-Structure/Chapter-7-Files.html":{"url":"02-Structure/Chapter-7-Files.html","title":"第七章: 文件","keywords":"","body":"第七章: 文件 第七章: 文件 创建 用法 序列读取 整个文件读取 扩展 练习 创建 句柄handle由函数open()创建。 handle = open(filename, mode) 模式 描述 r（默认） 以只读方式打开文件，指针将会放在文件的开头 w 打开一个文件只用于写入，并从开头开始编辑，如果该文件不存在，创建新文件。 Example: fhand = open('mbox.txt') 句柄handle: 用法 \b示例文件 this.txt: The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ... 计算机中，文本文件的每行末尾都有换行符（newline）\\n。 The Zen of Python, by Tim Peters\\n \\n Beautiful is better than ugly.\\n Explicit is better than implicit.\\n Simple is better than complex.\\n Complex is better than complicated.\\n ... 序列读取 文件中的每一行都是字符串，所以字符串共同构成序列。 有多少行，就有多少个字符串 序列存在先后顺序 xfile = open('this.txt') for cheese in xfile: print(cheese) 注： 每一个字符串的末尾\b是换行符\\n，同时print()也会自动换行，因此打印出来的\b\b字符串之间会空一行。 The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ... 整个文件读取 将整个文件读入一个字符串。 fhand = open('this.txt') inp = fhand.read() print(inp) The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ... 扩展 \bopen()之后需要close(): fhand = open('this.txt') fhand.close() 但常于with连用，可不用进行close()操作。 with open('this.txt') as fhand: print(fhand.read()) 练习 读取this.txt的前5行。 with open('this.txt') as fhand: inp = fhand.read().split('\\n') for i in inp[:5]: print(i) The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. "},"02-Structure/Chapter-8-Lists.html":{"url":"02-Structure/Chapter-8-Lists.html","title":"第八章: 列表","keywords":"","body":"第八章: 列表 第八章: 列表 创建 用法 数据选择 连接 长度 切片 逻辑 排序 常用内建函数 字典 附加 列表与字符串 创建 列表用于存储和修改数据，并通过[ ]来创建。 L = [1, 24, 76] 列表中可录入任何python数据类型 L_1 = [1, 24, 76] L_2 = ['red', 'yellow', 'blue'] 列表可以为空 L_3 = [] 或者 L_3 = list() 列表内容有序 L = [1, 24, 76] 用法 数据选择 列表和字符串相同，通过索引index进行选取。 friends = [ 'Joseph', 'Glenn', 'Sally' ] print(friends[1]) Glenn 与string相比，string内部数据不能改变，而list可以改变内部数据 修改string数据 fruit = 'Banana' fruit[0] = 'b' --------------------------------------------------------------------------- TypeError Traceback (most recent call last) in 1 fruit = 'Banana' ----> 2 fruit[0] = 'b' TypeError: 'str' object does not support item assignment 修改list数据 lotto = [2, 14, 26, 41, 63] print(lotto) lotto[2] = 28 print(lotto) [2, 14, 26, 41, 63] [2, 14, 28, 41, 63] 连接 使用 + 来\b连接2个列表。 a = [1, 2, 3] b = [4, 5, 6] c = a + b print(c) [1, 2, 3, 4, 5, 6] 长度 内建函数 len() 可用来计算列表长度。 x = [ 1, 2, 'joe', 99] print(len(x)) 4 切片 与string相同 t = [9, 41, 12, 3, 74, 15] t[1:3] [41, 12] 注： 切片位置到第二个数之前，不包括第二个数。 t = [9, 41, 12, 3, 74, 15] t[:4] [9, 41, 12, 3] 逻辑 some = [1, 9, 21, 10, 16] 9 in some True 15 in some False 20 not in some True 排序 列表内部数据有序，\b且可以排序。 friends = [ 'Joseph', 'Glenn', 'Sally' ] friends.sort() print(friends) ['Glenn', 'Joseph', 'Sally'] 常用内建函数 len(): nums = [3, 41, 12, 9, 74, 15] print(len(nums)) 6 max(): print(max(nums)) 74 min(): print(min(nums)) 3 sum(): print(sum(nums)) 154 字典 列表内建函数库Library。 x = list() type(x) list dir(x) ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] 附加 列表与字符串 split可以将字符串分成几部分并生成字符串列表。 abc = 'With three words' abc.split() ['With', 'three', 'words'] "},"02-Structure/Chapter-9-Dictionaries.html":{"url":"02-Structure/Chapter-9-Dictionaries.html","title":"第九章: 字典","keywords":"","body":"第九章: 字典 第九章: 字典 创建 用法 数据选择 Python新旧 获取 Key 获取 Value 获取一对数据 items 逻辑 计数 通常 字典内置函数get() 找出最大值 创建 字典用于存储和修改数据，并通过{ }来创建，与list不同，我们不再像list一样使用index来访问内部元素，而使用Key来给每个数据打上标签，因此\bdict需要同时存储1对值，Key和Value，同时Key必须是string类型。 D = {Key: Value} D = {'money': 12, 'tissues': 75, 'candy': 3} 空字典可以通过[ ]来添加数据。 D = dict() \bD['money'] = 12 D['tissues'] = 75 D['candy'] = 3 列表中可录入任何python数据类型 >>> L_1 = [1, 24, 76] >>> L_2 = [3, 75, 12] >>> D_1 = {'list_1': L_1,'list_2': L_2} >>> D_1 {'list_1': [1, 24, 76], 'list_2': [3, 75, 12]} >>> D_2 = {'list_1': L_1,'dict_1': D_1} >>> D_2 {'list_1': [1, 24, 76], 'dict_1': {'list_1': [1, 24, 76], 'list_2': [3, 75, 12]}} 字典可以为空 D_3 = {} 或者 D_3 = dict() 字典内容无序 >>> D_4 = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> print(D_4) {'jan': 100, 'chuck': 1, 'fred': 42} 用法 数据选择 通过索引Key进行选取。 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> print(D['tissues']) 75 Python新旧 Python更新3.4后，keys()不再返回list类型，而是\b使用一种可迭代类型dict_keys >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> D.keys() dict_keys(['money', 'tissues', 'candy']) 该效果同样作用于values()和items()。 函数 返回类型 示例 .keys() dict_keys dict_keys(['money', 'tissues', 'candy']) .valuse() dict_values dict_values([12, 75, 3]) .items() dict_items dict_items([('money', 12), ('tissues', 75), ('candy', 3)]) 获取 Key >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.keys()) ['money', 'tissues', 'candy'] 或者 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D) ['money', 'tissues', 'candy'] 获取 Value >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.values()) [12, 75, 3] 获取一对数据 items >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.items()) [('money', 12), ('tissues', 75), ('candy', 3)] Example: >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> for k, v in D.items(): ... print(k,v) ... money 12 tissues 75 candy 3 逻辑 in的查找功能在字典中作用于Key。 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> 'tissues' in D True >>> 75 in D False Example: 循环中的key从字典的Key中取值。 >>> counts = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> for key in counts: ... print(key, counts[key]) ... chuck 1 fred 42 jan 100 计数 \b字典常用来计数。 通常 计数： counts = dict() names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] for name in names : if name not in counts: counts[name] = 1 else : counts[name] = counts[name] + 1 print(counts) {'csev': 2, 'cwen': 2, 'zqian': 1} 字典内置函数get() 函数说明： get()函数用于获取Value，不会抛出error。 D.get(Key, DefaultValue)：如果在字典D中存在Key，则pass，如果不存在，则返回初值DefaultValue。 >>> D = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> D.get('fred',0) 42 >>> D.get('frd',13) 13 计数： counts = dict() names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] for name in names : counts[name] = counts.get(name, 0) + 1 print(counts) {'csev': 2, 'cwen': 2, 'zqian': 1} 找出最大值 bigcount = None bigword = None for word,count in counts.items(): if bigcount is None or count > bigcount: bigword = word bigcount = count print(bigword,bigcount) "},"02-Structure/Chapter-10-Tuples.html":{"url":"02-Structure/Chapter-10-Tuples.html","title":"第10章: 元组","keywords":"","body":"第10章: 元组 第10章: 元组 创建 用法 排序 创建 列表用于存储和修改数据，并通过( )来创建。 >>> T = ('Glenn', 'Sally', 'Joseph') >>> T[2] 'Joseph' 与string类型相似，你无法修改其内部数据 >>> T[2] = 'Jim' Traceback (most recent call last): File \"\", line 1, in TypeError: 'tuple' object does not support item assignment 优点： \b\b内存使用更少 执行效率更高 临时变量通常使用tuple 用法 排序 排序使用sorted函数 sorted(iterable, /, *, key=None, reverse=False) Example: >>> c = {'a':10, 'b':1, 'c':22} >>> tmp = list() >>> for k, v in c.items() : ... tmp.append( (v, k) ) ... >>> print(tmp) [(10, 'a'), (22, 'c'), (1, 'b')] >>> tmp = sorted(tmp, reverse=True) >>> print(tmp) [(22, 'c'), (10, 'a'), (1, 'b')] 可用来筛选出现频率最高的前几个类。 "}}